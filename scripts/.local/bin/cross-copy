#!/usr/bin/env bash

# clipboard-copy.sh
# Cross-platform clipboard utility that automatically detects the appropriate
# clipboard command based on the operating system and display server environment.
#
# Usage: echo "text to copy" | clipboard-copy.sh
#        clipboard-copy.sh "direct text argument"

set -euo pipefail  # Enable strict error handling

# Function to display usage information
show_usage() {
    echo "Usage: $0 [text]"
    echo "       echo 'text' | $0"
    echo ""
    echo "Cross-platform clipboard utility that automatically detects:"
    echo "  - Windows: uses 'clip' command"
    echo "  - macOS: uses 'pbcopy' command"
    echo "  - Linux Wayland: uses 'wl-copy' command"
    echo "  - Linux X11: uses 'xclip' command"
    exit 1
}

# Function to detect the appropriate clipboard command
detect_clipboard_command() {
    # Windows detection - check for MSYS or Cygwin environments
    if [[ "${OSTYPE:-}" == "msys" || "${OSTYPE:-}" == "cygwin" ]]; then
        echo "clip"
        return 0
    fi

    # macOS detection - Darwin kernel family
    if [[ "${OSTYPE:-}" == darwin* ]]; then
        echo "pbcopy"
        return 0
    fi

    # Linux detection - distinguish between Wayland and X11
    if [[ "${OSTYPE:-}" == linux* || "${OSTYPE:-}" == gnu* ]]; then
        # Check for Wayland session first
        if [[ -n "${WAYLAND_DISPLAY:-}" ]]; then
            echo "wl-copy"
            return 0
        # Fall back to X11 if no Wayland detected
        elif [[ -n "${DISPLAY:-}" ]]; then
            echo "xclip -selection clipboard"
            return 0
        else
            # No display server detected - this might be a headless system
            echo "ERROR: No display server detected (neither Wayland nor X11)" >&2
            return 1
        fi
    fi

    # If we reach here, we couldn't detect the platform
    echo "ERROR: Unsupported platform: ${OSTYPE:-unknown}" >&2
    return 1
}

# Function to verify that the detected command is actually available
verify_clipboard_command() {
    local cmd="$1"
    local base_cmd

    # Extract the base command name (before any arguments)
    base_cmd=$(echo "$cmd" | awk '{print $1}')

    if ! command -v "$base_cmd" >/dev/null 2>&1; then
        echo "ERROR: Clipboard command '$base_cmd' not found in PATH" >&2
        echo "Please install the appropriate clipboard utility for your system:" >&2
        echo "  - Linux Wayland: pacman -S wl-clipboard (or equivalent for your distro)" >&2
        echo "  - Linux X11: pacman -S xclip (or equivalent for your distro)" >&2
        return 1
    fi

    return 0
}

# Main execution logic
main() {
    local clipboard_cmd
    local input_text

    # Handle help flag
    if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
        show_usage
    fi

    # Detect the appropriate clipboard command for this platform
    if ! clipboard_cmd=$(detect_clipboard_command); then
        exit 1
    fi

    # Verify that the detected command is actually available
    if ! verify_clipboard_command "$clipboard_cmd"; then
        exit 1
    fi

    # Determine input source - either from arguments or stdin
    if [[ $# -gt 0 ]]; then
        # Text provided as command line argument
        input_text="$*"
    else
        # Read from stdin (pipe input)
        if [[ -t 0 ]]; then
            # stdin is a terminal (no pipe), show usage
            show_usage
        fi
        input_text=$(cat)
    fi

    # Copy the text to clipboard using the detected command
    echo -n "$input_text" | eval "$clipboard_cmd"

    # Provide feedback to user (optional - can be removed if you prefer silent operation)
    echo "Copied to clipboard using: $clipboard_cmd" >&2
}

# Execute main function with all script arguments
main "$@"
